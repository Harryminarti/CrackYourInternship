class Solution {
    public int findDuplicate(int[] nums) {

        // Warning we have not to modify array please remember it and Read the Questions Carefully ..............

        for(int i=0;i<nums.length;i++){
            int indx= Math.abs(nums[i])-1;
            if(nums[indx]<0)
            return indx+1;
            else {
                nums[indx]= -nums[indx];
            }
        }
return -1;





//         -----------Optimized Approach----------------


// int slow = nums[0];
// int fast = nums[0];


// do{
//     slow= nums[slow];
//     fast = nums[nums[fast]];
// }while(slow!=fast);

// slow=nums[0];

// while(slow!=fast){
//     slow=nums[slow];
//     fast = nums[fast];
// }


// return slow;










// // ------------Right solution but,Approach is wrong-------------------
// int index =0;

// for(int i=0;i<nums.length;i++){

//   index = Math.abs(nums[i]);   //use math.abs for negative to positive

// if(nums[index]<0){
//     return index;
// }else{
//     nums[index]= -(nums[index]);
// }

// }

// return index;


// -----------Another Right solution but Approach is wrong----------




// Arrays.sort(nums);
// int repeated_number =nums[0];


// for(int i=1;i<nums.length;i++){

//     if(nums[i]==repeated_number){

// break;

//     }
//     repeated_number = nums[i];

// }
// return repeated_number;

        
    }
}
